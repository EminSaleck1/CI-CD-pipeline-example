
name: Example

on:
  # Triggers
  push:
    branches: [ "develop" ]

  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
         echo "Checking if environment variables are set..."
          if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then echo "BUILD_CERTIFICATE_BASE64 is not set"; else echo "BUILD_CERTIFICATE_BASE64 is set"; fi
          if [ -z "$P12_PASSWORD" ]; then echo "P12_PASSWORD is not set"; else echo "P12_PASSWORD is set"; fi
          if [ -z "$BUILD_PROVISION_PROFILE_BASE64" ]; then echo "BUILD_PROVISION_PROFILE_BASE64 is not set"; else echo "BUILD_PROVISION_PROFILE_BASE64 is set"; fi
          if [ -z "$KEYCHAIN_PASSWORD" ]; then echo "KEYCHAIN_PASSWORD is not set"; else echo "KEYCHAIN_PASSWORD is set"; fi
          
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
         xcode-version: 15.3.0

      - name: Decode Xcode config
        env:
          XCODE_CONFIG: ${{ secrets.XCODE_CONFIG }}
        run: |
          echo -n "$XCODE_CONFIG" | base64 --decode --output VideoAI/Config.xcconfig
        
      - name: Build and export IPA
        env:
          EXPORT_PLIST: ${{ secrets.EXPORT_OPTIONS_LIST }}
        run: |
            EXPORT_PLIST_PATH=$RUNNER_TEMP/exportOptions.plist
            echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
            xcodebuild -skipMacroValidation clean archive -project VideoAI/VideoAI.xcodeproj -scheme "DEBUG" -archivePath $RUNNER_TEMP/VideoAI.xcarchive -destination 'generic/platform=iOS' CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER="Geniart - Ad Hoc" -verbose
            xcodebuild -skipMacroValidation -exportArchive -archivePath $RUNNER_TEMP/VideoAI.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath $RUNNER_TEMP/export
      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: ipa-file
          path: ${{ runner.temp }}/export/VideoAI.ipa
      
  upload_to_appcenter:
    needs: build_ios
    runs-on: ubuntu-latest
    steps:

    - name: Download IPA
      uses: actions/download-artifact@v2
      with:
        name: ipa-file

    - name: App Center Distribute
      uses: devussy/AppCenter-Distribute-Github-Action@v3.0.0
      with:
          appName: Polytech/VideoAI
          token: ${{ secrets.APPCENTER_API_TOKEN }}
          group: Internal
          file: VideoAI.ipa
          notifyTesters: true
          debug: true
          
  upload_to_browserstack:
    needs: upload_to_appcenter
    runs-on: ubuntu-latest
    steps:
    - name: Download IPA
      uses: actions/download-artifact@v2
      with:
        name: ipa-file

    - name: Upload to BrowserStack
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      run: |
        curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
             -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
             -F "file=@VideoAI.ipa" \
             -F "custom_id=VideoAI_${{ github.sha }}"

  update_jira:
    needs: upload_to_appcenter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Get commit message
        id: get_commit_message
        run: echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.sha }})"

      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Find Jira issue in commit message
        id: find_issue
        uses: atlassian/gajira-find-issue-key@v3
        with:
          string: ${{ steps.get_commit_message.outputs.message }}

      - name: Update Jira issue
        if: steps.find_issue.outputs.issue
        uses: atlassian/gajira-transition@v3
        with:
          issue: ${{ steps.find_issue.outputs.issue }}
          transition: "QA"

      - name: Add comment to Jira issue
        if: steps.find_issue.outputs.issue
        uses: atlassian/gajira-comment@v3
        with:
          issue: ${{ steps.find_issue.outputs.issue }}
          comment: |
            A new iOS build has been uploaded to App Center.
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            [View in App Center](https://appcenter.ms/orgs/Polytech/apps/VideoAI)

      - name: Log updated issue
        if: steps.find_issue.outputs.issue
        run: echo "Updated issue ${{ steps.find_issue.outputs.issue }}"

      - name: Log if no issue found
        if: steps.find_issue.outputs.issue == ''
        run: echo "No Jira issue found in commit message"
